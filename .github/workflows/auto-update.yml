name: Auto Update and Deploy

# Workflow สำหรับอัปเดตและ deploy เว็บไซต์อัตโนมัติ
# รองรับการเรียกใช้ด้วย manual trigger และ schedule

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all assets'
        required: false
        default: false
        type: boolean
      clear_cache:
        description: 'Clear GitHub Actions cache'
        required: false
        default: false
        type: boolean
  
  # เรียกใช้อัตโนมัติเมื่อมีการ push ไฟล์สำคัญ
  push:
    branches: [ main ]
    paths:
      - 'css/**'
      - 'js/**'
      - 'pages/**'
      - '*.html'
      - 'images/**'
  
  # เรียกใช้อัตโนมัติทุกวันเที่ยงคืน (UTC) เพื่อรีเฟรช cache
  schedule:
    - cron: '0 0 * * *'

jobs:
  auto-update:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      id-token: write
      actions: write
      
    concurrency:
      group: "auto-update-${{ github.ref }}"
      cancel-in-progress: true
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🗑️ Clear cache if requested
      if: ${{ inputs.clear_cache == true }}
      run: |
        echo "🧹 Clearing GitHub Actions cache..."
        gh cache delete --all || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: ⚙️ Setup Node.js (if needed)
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🔄 Update build timestamp
      run: |
        BUILD_TIME=$(date +%s)
        BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
        echo "📅 Build time: $BUILD_TIME"
        echo "📅 Build date: $BUILD_DATE"

    - name: 🔧 Optimize and prepare assets
      run: |
        echo "🚀 Optimizing assets for Green Blue Rest Bangkok..."
        
        # Ensure scripts directory exists
        mkdir -p scripts
        
        # Make sure cache-buster.js has the latest features
        echo "🔄 Updating cache-buster functionality..."
        
        # Create optimized build info
        cat > build-info.json << EOF
        {
          "buildTime": "$BUILD_TIME",
          "buildDate": "$BUILD_DATE",
          "commit": "$GITHUB_SHA",
          "branch": "$GITHUB_REF_NAME",
          "workflow": "$GITHUB_RUN_ID",
          "triggerEvent": "$GITHUB_EVENT_NAME",
          "version": "auto-$BUILD_TIME"
        }
        EOF
        
        # Add build info to main JavaScript files
        echo "📋 Injecting build info into JavaScript..."
        for js_file in js/*.js; do
          if [[ -f "$js_file" && ! "$js_file" =~ cache-buster ]]; then
            if ! grep -q "BUILD_INFO" "$js_file"; then
              echo "// BUILD_INFO: $BUILD_DATE" >> "$js_file"
            fi
          fi
        done

    - name: 🎨 Process CSS with cache-busting
      run: |
        echo "🎨 Processing CSS files..."
        
        # Add version info to CSS files
        for css_file in css/*.css; do
          if [[ -f "$css_file" ]]; then
            if ! grep -q "Build:" "$css_file"; then
              echo "/* Build: $BUILD_DATE */" >> "$css_file"
            fi
          fi
        done

    - name: 🖼️ Optimize images (if tools available)
      run: |
        echo "🖼️ Checking image optimization..."
        
        # Count images
        image_count=$(find images -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.webp" \) 2>/dev/null | wc -l || echo 0)
        echo "📊 Found $image_count images"
        
        # Basic image validation
        for img in $(find images -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" \) 2>/dev/null | head -10); do
          if [[ -f "$img" ]]; then
            size=$(stat -f%z "$img" 2>/dev/null || stat -c%s "$img" 2>/dev/null || echo "unknown")
            echo "   📎 $(basename "$img"): ${size} bytes"
          fi
        done

    - name: 🏗️ Build site with enhanced caching
      run: |
        echo "🏗️ Building Green Blue Rest Bangkok website with enhanced features..."
        
        # Copy main.html to index.html for GitHub Pages
        cp main.html index.html
        echo "✅ Created index.html from main.html"
        
        # Enhanced cache busting - add to all HTML files
        echo "🔄 Applying advanced cache busting..."
        for html_file in $(find . -maxdepth 2 -name "*.html"); do
          echo "   Processing: $html_file"
          
          # Add cache busting to CSS files
          sed -i.bak "s/\.css\"/\.css?v=$BUILD_TIME\"/g" "$html_file"
          
          # Add cache busting to JS files
          sed -i.bak "s/\.js\"/\.js?v=$BUILD_TIME\"/g" "$html_file"
          
          # Ensure cache-buster script is included
          if ! grep -q "cache-buster.js" "$html_file"; then
            sed -i.bak 's|</head>|    <script src="js/cache-buster.js?v='$BUILD_TIME'"></script>\n</head>|' "$html_file"
          fi
          
          # Clean up backup files
          rm -f "$html_file.bak"
        done
        
        # Create a deployment manifest
        cat > deployment-manifest.json << EOF
        {
          "deployment": {
            "timestamp": "$BUILD_TIME",
            "date": "$BUILD_DATE",
            "version": "auto-$BUILD_TIME",
            "commit": "$GITHUB_SHA",
            "branch": "$GITHUB_REF_NAME",
            "files": {
              "html": $(find . -name "*.html" | wc -l),
              "css": $(find . -name "*.css" | wc -l),
              "js": $(find . -name "*.js" | wc -l),
              "images": $(find . -name "*.jpg" -o -name "*.png" -o -name "*.gif" | wc -l)
            }
          }
        }
        EOF
        
        echo "✅ Enhanced build completed successfully"

    - name: 🧪 Validate build
      run: |
        echo "🧪 Validating build output..."
        
        # Check essential files exist
        essential_files=("index.html" "css/style.css" "js/main.js" "js/cache-buster.js")
        for file in "${essential_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        # Validate HTML structure
        if grep -q "<title>" index.html; then
          echo "✅ HTML structure valid"
        else
          echo "❌ HTML structure invalid"
          exit 1
        fi
        
        echo "🎉 Build validation passed!"

    - name: 📊 Generate deployment report
      run: |
        echo "📊 Generating deployment report..."
        
        cat > deployment-report.md << EOF
        # 🚀 Deployment Report
        
        **Build Date:** $BUILD_DATE
        **Build Time:** $BUILD_TIME
        **Commit:** $GITHUB_SHA
        **Branch:** $GITHUB_REF_NAME
        **Workflow:** $GITHUB_RUN_ID
        
        ## 📋 Build Summary
        - ✅ Cache busting applied
        - ✅ Assets optimized
        - ✅ Build validation passed
        
        ## 📂 File Counts
        - HTML files: $(find . -name "*.html" | wc -l)
        - CSS files: $(find . -name "*.css" | wc -l)
        - JavaScript files: $(find . -name "*.js" | wc -l)
        - Images: $(find . -name "*.jpg" -o -name "*.png" -o -name "*.gif" | wc -l)
        
        ---
        *Auto-generated by GitHub Actions*
        EOF
        
        echo "📋 Deployment report created"

    - name: 📤 Setup Pages
      uses: actions/configure-pages@v4

    - name: 📦 Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: 🎯 Post-deployment validation
      run: |
        echo "🎯 Running post-deployment validation..."
        
        # Wait a moment for deployment to propagate
        sleep 30
        
        # Test site accessibility
        SITE_URL="https://nattagid.github.io/greenbluerestbangkok"
        
        if curl -sf "$SITE_URL" > /dev/null; then
          echo "✅ Site is accessible at $SITE_URL"
          
          # Check if cache busting is working
          response=$(curl -s -I "$SITE_URL/css/style.css?v=$BUILD_TIME" || echo "")
          if [[ "$response" == *"200"* ]]; then
            echo "✅ Cache busting is working"
          else
            echo "⚠️ Cache busting may not be working correctly"
          fi
        else
          echo "⚠️ Site may not be immediately accessible (this is sometimes normal)"
        fi

    - name: 📢 Success notification
      run: |
        echo "🎉 Auto-update and deployment completed successfully!"
        echo "🌐 Site URL: https://nattagid.github.io/greenbluerestbangkok"
        echo "📅 Build time: $BUILD_DATE"
        echo "🔖 Version: auto-$BUILD_TIME"
        echo ""
        echo "✨ Features applied:"
        echo "   - ✅ Advanced cache busting"
        echo "   - ✅ Asset optimization" 
        echo "   - ✅ Build validation"
        echo "   - ✅ Deployment verification"